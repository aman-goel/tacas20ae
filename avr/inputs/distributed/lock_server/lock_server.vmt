(set-info :source |I4 (https://github.com/GLaDOS-Michigan/I4)|)

; Typecast bit to bool
(define-sort bool_type () (_ BitVec 1))
(define-fun bv_false () bool_type (_ bv0 1))
(define-fun bv_true  () bool_type (_ bv1 1))
(define-fun is_bool ((x bool_type)) Bool (or (= x bv_true) (= x bv_false)))

(define-sort client_type () (_ BitVec 1))
(define-sort server_type () (_ BitVec 1))

; Define and enumerate transition system parameters
(define-fun client0 () client_type (_ bv0 1))
(define-fun client1 () client_type (_ bv1 1))
(define-fun server0 () server_type (_ bv0 1))

(define-fun is_client ((client client_type)) Bool (or (= client client0) (= client client1)))
(define-fun is_server ((server server_type)) Bool (or (= server server0)))

; Declare transition system states
(declare-fun link_0_0 () bool_type)
(declare-fun link_1_0 () bool_type)
(declare-fun semaphore_0 () bool_type)

(declare-fun link_0_0_next () bool_type)
(declare-fun link_1_0_next () bool_type)
(declare-fun semaphore_0_next () bool_type)

(define-fun .link_0_0 () bool_type (! link_0_0 :next link_0_0_next))
(define-fun .link_1_0 () bool_type (! link_1_0 :next link_1_0_next))
(define-fun .semaphore_0 () bool_type (! semaphore_0 :next semaphore_0_next))

(define-fun update_link ((newv bool_type) (prev bool_type) (cond Bool) (val bool_type)) Bool (= newv (ite cond val prev)))
(define-fun update_semaphore ((newv bool_type) (prev bool_type) (cond Bool) (val bool_type)) Bool (= newv (ite cond val prev)))

; Initial state
(define-fun .init () Bool (! 
(and 
	(= semaphore_0 bv_true)
	(= link_0_0 bv_false)
	(= link_1_0 bv_false)
) :init true))

(define-fun connect_fun ((fml_x client_type) (fml_y server_type)) Bool 
(and 
	(is_client fml_x) (is_server fml_y) 
	(= semaphore_0 bv_true) 
	(update_link link_0_0_next link_0_0 (and (= fml_x client0) (= fml_y server0)) bv_true) 
	(update_link link_1_0_next link_1_0 (and (= fml_x client1) (= fml_y server0)) bv_true) 
	(update_semaphore semaphore_0_next semaphore_0 (and (= fml_y server0)) bv_false)
))

(define-fun disconnect_fun ((fml_x client_type) (fml_y server_type)) Bool 
(and 
	(is_client fml_x) (is_server fml_y) 
	(= (ite (and (= fml_x client0) (= fml_y server0)) link_0_0 link_1_0) bv_true) 
	(update_link link_0_0_next link_0_0 (and (= fml_x client0) (= fml_y server0)) bv_false) 
	(update_link link_1_0_next link_1_0 (and (= fml_x client1) (= fml_y server0)) bv_false)
	(update_semaphore semaphore_0_next semaphore_0 (and (= fml_y server0)) bv_true)
))

; Declare actions
(define-sort action_type () (_ BitVec 4))
(define-fun connect() action_type (_ bv0 4))
(define-fun disconnect() action_type (_ bv1 4))

; Transition relation
(declare-fun action () action_type)
(declare-fun connect_fml_x () client_type)
(declare-fun connect_fml_y () server_type)
(declare-fun disconnect_fml_x () client_type)
(declare-fun disconnect_fml_y () server_type)
(define-fun .trans () Bool (! 
(and  
	(=> (= action connect) 
		(connect_fun connect_fml_x connect_fml_y)) 
	(=> (= action disconnect) 
		(disconnect_fun disconnect_fml_x disconnect_fml_y)) 
	(=> (not (or (= action connect) (= action disconnect))) 
		(and 
			(= link_0_0 link_0_0_next) 
			(= link_1_0 link_1_0_next) 
			(= semaphore_0 semaphore_0_next)))
) :trans true))

(define-fun .prop () Bool (! 
(not (and 
	(= link_0_0 bv_true)
	(= link_1_0 bv_true)
)) :invar-property 0))
